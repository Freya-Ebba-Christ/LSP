/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.lsp4;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.eclipse.lsp4j.*;
class AppTest {
    @Test
    void appHasAGreeting() {
        // Initialize the language server
        MyLanguagelServer classUnderTest = new MyLanguagelServer();

        // Initialize parameters for the language server
        InitializeParams params = new InitializeParams();
        params.setProcessId(1);
        params.setRootUri("file:///root");
        params.setCapabilities(new ClientCapabilities());
        params.setRootPath("/path/to/your/project"); // This should be updated to your project path

        // Call initialize
        classUnderTest.initialize(params).thenAccept(result -> {
            assertNotNull(result, "Initialize result should not be null");
        });

        // Now, you can send some documents for processing and check if the server can respond
        DidOpenTextDocumentParams didOpenParams = new DidOpenTextDocumentParams();
        TextDocumentItem textDocumentItem = new TextDocumentItem();
        textDocumentItem.setUri("file:///path/to/your/file.dsl");
        textDocumentItem.setLanguageId("dsl"); // Assuming you set the languageId as 'dsl'
        textDocumentItem.setText("task \"Write Code\" {\n  description \"Write a test for the DSL Server\"\n  priority high\n  due \"2025-06-01\"\n}");

        didOpenParams.setTextDocument(textDocumentItem);
        classUnderTest.getTextDocumentService().didOpen(didOpenParams);

        // Add more interactions with the server, such as completions, hover, etc., based on the grammar
        // Example: test for completion or diagnostics
    }
}
